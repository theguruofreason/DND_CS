--[[ Lua code. See documentation: https://api.tabletopsimulator.com/ ]]--
-- enum setup
function enum(tbl)
    local length = #tbl
    for i = 1, length do
        local v = tbl[i]
        tbl[v] = i
    end

    return tbl
end

-- UI Data --

function inactive_panel(player)
  log(dndCS.pc_data[player.steam_id].cs_panel.active)
  return {
    tag = "Panel",
    attributes = {
      id = "cs_inactive_" .. player.color,
      allowDragging = "true",
      returnToOriginalPositionWhenReleased = "false",
      width = 98,
      height = 108,
      visibility = player.color,
      position= "-400 -447",
      active = not dndCS.pc_data[player.steam_id].cs_panel.active
    },
    children = {
      {
        tag = "Button",
        attributes = {
          icon = "Small_CS",
          onClick = "toggleCSPane"
        }
      }
    }
  }
end

function active_panel(player)
  return {
    ["tag"] ="Panel",
    ["attributes"] = {
      ["id"] ="cs_active_"..player.color,
      ["allowDragging"] ="false",
      ["width"] ="979",
      ["height"] ="1080",
      ["visibility"] =player.color,
      ["position"] ="0 0",
      ["active"] =dndCS.pc_data[player.steam_id].cs_panel.active
    },
    ["children"] = {
      {
        ["tag"] ="Image",
        ["attributes"] = {
          ["id"] ="cs_page_"..player.color,
          ["image"] ="Char_Sheet_1"
        },
        ["children"] = {}
      },
      {
        ["tag"] ="Button",
        ["attributes"] = {
          ["id"] ="cs_toggle_button_active_"..player.color,
          ["width"] ="50",
          ["height"] ="50",
          ["rectAlignment"] ="UpperRight",
          ["onClick"] ="toggleCSPane",
          ["sprite"] ="Red_X"
        },
        ["children"] = {}
      },
      {
        ["tag"] ="InputField",
        ["attributes"] = {
          ["id"] ="cs_char_name_"..player.color,
          ["onEndEdit"] ="charNameChange",
          ["placeholder"] ="Name",
          ["characterLimit"] ="60",
          ["width"] ="380",
          ["height"] ="42",
          ["rectAlignment"] ="UpperLeft",
          ["offsetXY"] ="68 -18",
          ["fontSize"] ="25"
        },
        ["children"] = {}
      },
      {
        ["tag"] ="InputField",
        ["attributes"] = {
          ["id"] ="cs_lvl_"..player.color,
          ["onEndEdit"] ="lvlChange",
          ["placeholder"] ="lvl",
          ["characterLimit"] ="5",
          ["width"] ="50",
          ["height"] ="42",
          ["rectAlignment"] ="UpperRight",
          ["offsetXY"] ="-380 -18",
          ["fontSize"] ="25"
        },
        ["children"] = {}
      },
      {
        ["tag"] ="InputField",
        ["attributes"] = {
          ["id"] ="cs_class_"..player.color,
          ["onEndEdit"] ="classChange",
          ["placeholder"] ="class",
          ["characterLimit"] ="60",
          ["width"] ="230",
          ["height"] ="42",
          ["rectAlignment"] ="UpperRight",
          ["offsetXY"] ="-88 -18",
          ["fontSize"] ="25"
        },
        ["children"] = {}
      },
      {
        ["tag"] ="InputField",
        ["attributes"] = {
          ["id"] ="cs_str_"..player.color,
          ["onEndEdit"] ="attributeChange",
          ["placeholder"] ="str",
          ["characterLimit"] ="2",
          ["characterValidation"] ="Integer",
          ["width"] ="100",
          ["height"] ="65",
          ["rectAlignment"] ="UpperLeft",
          ["offsetXY"] ="30 -110",
          ["fontSize"] ="45"
        },
        ["children"] = {}
      },
      {
        ["tag"] ="Text",
        ["attributes"] = {
          ["id"] ="cs_str_bonus_"..player.color,
          ["width"] ="50",
          ["height"] ="50",
          ["rectAlignment"] ="UpperLeft",
          ["offsetXY"] ="55 -175",
          ["fontSize"] ="30"
        },
        ["children"] = {}
      },
      {
        ["tag"] ="InputField",
        ["attributes"] = {
          ["id"] ="cs_dex_"..player.color,
          ["onEndEdit"] ="attributeChange",
          ["placeholder"] ="dex",
          ["characterLimit"] ="2",
          ["characterValidation"] ="Integer",
          ["width"] ="100",
          ["height"] ="65",
          ["rectAlignment"] ="UpperLeft",
          ["offsetXY"] ="30 -278",
          ["fontSize"] ="45"
        },
        ["children"] = {}
      },
      {
        ["tag"] ="Text",
        ["attributes"] = {
          ["id"] ="cs_dex_bonus_"..player.color,
          ["width"] ="50",
          ["height"] ="50",
          ["rectAlignment"] ="UpperLeft",
          ["offsetXY"] ="55 -345",
          ["fontSize"] ="30"
        },
        ["children"] = {}
      },
      {
        ["tag"] ="InputField",
        ["attributes"] = {
          ["id"] ="cs_con_"..player.color,
          ["onEndEdit"] ="attributeChange",
          ["placeholder"] ="con",
          ["characterLimit"] ="2",
          ["characterValidation"] ="Integer",
          ["width"] ="100",
          ["height"] ="65",
          ["rectAlignment"] ="UpperLeft",
          ["offsetXY"] ="30 -446",
          ["fontSize"] ="45"
        },
        ["children"] = {}
      },
      {
        ["tag"] ="Text",
        ["attributes"] = {
          ["id"] ="cs_con_bonus_"..player.color,
          ["width"] ="50",
          ["height"] ="50",
          ["rectAlignment"] ="UpperLeft",
          ["offsetXY"] ="55 -513",
          ["fontSize"] ="30"
        },
        ["children"] = {}
      },
      {
        ["tag"] ="InputField",
        ["attributes"] = {
          ["id"] ="cs_int_"..player.color,
          ["onEndEdit"] ="attributeChange",
          ["placeholder"] ="int",
          ["characterLimit"] ="2",
          ["characterValidation"] ="Integer",
          ["width"] ="100",
          ["height"] ="65",
          ["rectAlignment"] ="UpperLeft",
          ["offsetXY"] ="30 -615",
          ["fontSize"] ="45"
        },
        ["children"] = {}
      },
      {
        ["tag"] ="Text",
        ["attributes"] = {
          ["id"] ="cs_int_bonus_"..player.color,
          ["width"] ="50",
          ["height"] ="50",
          ["rectAlignment"] ="UpperLeft",
          ["offsetXY"] ="55 -680",
          ["fontSize"] ="30"
        },
        ["children"] = {}
      },
      {
        ["tag"] ="InputField",
        ["attributes"] = {
          ["id"] ="cs_wis_"..player.color,
          ["onEndEdit"] ="attributeChange",
          ["placeholder"] ="wis",
          ["characterLimit"] ="2",
          ["characterValidation"] ="Integer",
          ["width"] ="100",
          ["height"] ="65",
          ["rectAlignment"] ="UpperLeft",
          ["offsetXY"] ="30 -783",
          ["fontSize"] ="45"
        },
        ["children"] = {}
      },
      {
        ["tag"] ="Text",
        ["attributes"] = {
          ["id"] ="cs_wis_bonus_"..player.color,
          ["width"] ="50",
          ["height"] ="50",
          ["rectAlignment"] ="UpperLeft",
          ["offsetXY"] ="55 -850",
          ["fontSize"] ="30"
        },
        ["children"] = {}
      },
      {
        ["tag"] ="InputField",
        ["attributes"] = {
          ["id"] ="cs_cha_"..player.color,
          ["onEndEdit"] ="attributeChange",
          ["placeholder"] ="cha",
          ["characterLimit"] ="2",
          ["characterValidation"] ="Integer",
          ["width"] ="100",
          ["height"] ="65",
          ["rectAlignment"] ="UpperLeft",
          ["offsetXY"] ="30 -952",
          ["fontSize"] ="45"
        },
        ["children"] = {}
      },
      {
        ["tag"] ="Text",
        ["attributes"] = {
          ["id"] ="cs_cha_bonus_"..player.color,
          ["width"] ="50",
          ["height"] ="50",
          ["rectAlignment"] ="UpperLeft",
          ["offsetXY"] ="55 -1018",
          ["fontSize"] ="30"
        },
        ["children"] = {}
      },
      {
        ["tag"] ="InputField",
        ["attributes"] = {
          ["id"] ="cs_inspiration_"..player.color,
          ["onEndEdit"] ="inspirationChange",
          ["placeholder"] =" ",
          ["characterLimit"] ="1",
          ["characterValidation"] ="Integer",
          ["width"] ="40",
          ["height"] ="40",
          ["rectAlignment"] ="UpperLeft",
          ["offsetXY"] ="180 -90",
          ["fontSize"] ="24"
        },
        ["children"] = {}
      },
      {
        ["tag"] ="InputField",
        ["attributes"] = {
          ["id"] ="cs_proficiency_"..player.color,
          ["onEndEdit"] ="proficiencyChange",
          ["placeholder"] =" ",
          ["characterLimit"] ="1",
          ["characterValidation"] ="Integer",
          ["width"] ="40",
          ["height"] ="40",
          ["rectAlignment"] ="UpperLeft",
          ["offsetXY"] ="183 -188",
          ["fontSize"] ="24"
        },
        ["children"] = {}
      },
      {
        ["tag"] ="ToggleButton",
        ["attributes"] = {
          ["id"] ="cs_st_str_toggle_"..player.color,
          ["onValueChanged"] ="savingThrowToggle",
          ["width"] ="13",
          ["height"] ="13",
          ["rectAlignment"] ="UpperLeft",
          ["offsetXY"] ="194 -287",
          ["fontSize"] ="24"
        },
        ["children"] = {}
      },
      {
        ["tag"] ="ToggleButton",
        ["attributes"] = {
          ["id"] ="cs_st_dex_toggle_"..player.color,
          ["onValueChanged"] ="savingThrowToggle",
          ["width"] ="13",
          ["height"] ="13",
          ["rectAlignment"] ="UpperLeft",
          ["offsetXY"] ="194 -311",
          ["fontSize"] ="24"
        },
        ["children"] = {}
      },
      {
        ["tag"] ="ToggleButton",
        ["attributes"] = {
          ["id"] ="cs_st_con_toggle_"..player.color,
          ["onValueChanged"] ="savingThrowToggle",
          ["width"] ="13",
          ["height"] ="13",
          ["rectAlignment"] ="UpperLeft",
          ["offsetXY"] ="194 -336",
          ["fontSize"] ="24"
        },
        ["children"] = {}
      },
      {
        ["tag"] ="ToggleButton",
        ["attributes"] = {
          ["id"] ="cs_st_int_toggle_"..player.color,
          ["onValueChanged"] ="savingThrowToggle",
          ["width"] ="13",
          ["height"] ="13",
          ["rectAlignment"] ="UpperLeft",
          ["offsetXY"] ="194 -360",
          ["fontSize"] ="24"
        },
        ["children"] = {}
      },
      {
        ["tag"] ="ToggleButton",
        ["attributes"] = {
          ["id"] ="cs_st_wis_toggle_"..player.color,
          ["onValueChanged"] ="savingThrowToggle",
          ["width"] ="13",
          ["height"] ="13",
          ["rectAlignment"] ="UpperLeft",
          ["offsetXY"] ="194 -385",
          ["fontSize"] ="24"
        },
        ["children"] = {}
      },
      {
        ["tag"] ="ToggleButton",
        ["attributes"] = {
          ["id"] ="cs_st_cha_toggle_"..player.color,
          ["onValueChanged"] ="savingThrowToggle",
          ["width"] ="13",
          ["height"] ="13",
          ["rectAlignment"] ="UpperLeft",
          ["offsetXY"] ="194 -409",
          ["fontSize"] ="24"
        },
        ["children"] = {}
      },
      {
        ["tag"] ="ToggleButton",
        ["attributes"] = {
          ["id"] ="cs_skill_acrobatics_toggle_"..player.color,
          ["onValueChanged"] ="skillToggle",
          ["width"] ="13",
          ["height"] ="13",
          ["rectAlignment"] ="UpperLeft",
          ["offsetXY"] ="204 -470"
        },
        ["children"] = {}
      },
      {
        ["tag"] ="ToggleButton",
        ["attributes"] = {
          ["id"] ="cs_skill_animal_handling_toggle_"..player.color,
          ["onValueChanged"] ="skillToggle",
          ["width"] ="13",
          ["height"] ="13",
          ["rectAlignment"] ="UpperLeft",
          ["offsetXY"] ="204 -499"
        },
        ["children"] = {}
      },
      {
        ["tag"] ="ToggleButton",
        ["attributes"] = {
          ["id"] ="cs_skill_arcana_toggle_"..player.color,
          ["onValueChanged"] ="skillToggle",
          ["width"] ="13",
          ["height"] ="13",
          ["rectAlignment"] ="UpperLeft",
          ["offsetXY"] ="204 -529"
        },
        ["children"] = {}
      },
      {
        ["tag"] ="ToggleButton",
        ["attributes"] = {
          ["id"] ="cs_skill_athletics_toggle_"..player.color,
          ["onValueChanged"] ="skillToggle",
          ["width"] ="13",
          ["height"] ="13",
          ["rectAlignment"] ="UpperLeft",
          ["offsetXY"] ="204 -558"
        },
        ["children"] = {}
      },
      {
        ["tag"] ="ToggleButton",
        ["attributes"] = {
          ["id"] ="cs_skill_deception_toggle_"..player.color,
          ["onValueChanged"] ="skillToggle",
          ["width"] ="13",
          ["height"] ="13",
          ["rectAlignment"] ="UpperLeft",
          ["offsetXY"] ="204 -588"
        },
        ["children"] = {}
      },
      {
        ["tag"] ="ToggleButton",
        ["attributes"] = {
          ["id"] ="cs_skill_history_toggle_"..player.color,
          ["onValueChanged"] ="skillToggle",
          ["width"] ="13",
          ["height"] ="13",
          ["rectAlignment"] ="UpperLeft",
          ["offsetXY"] ="204 -617"
        },
        ["children"] = {}
      },
      {
        ["tag"] ="ToggleButton",
        ["attributes"] = {
          ["id"] ="cs_skill_insight_toggle_"..player.color,
          ["onValueChanged"] ="skillToggle",
          ["width"] ="13",
          ["height"] ="13",
          ["rectAlignment"] ="UpperLeft",
          ["offsetXY"] ="204 -646"
        },
        ["children"] = {}
      },
      {
        ["tag"] ="ToggleButton",
        ["attributes"] = {
          ["id"] ="cs_skill_intimidation_toggle_"..player.color,
          ["onValueChanged"] ="skillToggle",
          ["width"] ="13",
          ["height"] ="13",
          ["rectAlignment"] ="UpperLeft",
          ["offsetXY"] ="204 -676"
        },
        ["children"] = {}
      },
      {
        ["tag"] ="ToggleButton",
        ["attributes"] = {
          ["id"] ="cs_skill_investigation_toggle_"..player.color,
          ["onValueChanged"] ="skillToggle",
          ["width"] ="13",
          ["height"] ="13",
          ["rectAlignment"] ="UpperLeft",
          ["offsetXY"] ="204 -705"
        },
        ["children"] = {}
      },
      {
        ["tag"] ="ToggleButton",
        ["attributes"] = {
          ["id"] ="cs_skill_medicine_toggle_"..player.color,
          ["onValueChanged"] ="skillToggle",
          ["width"] ="13",
          ["height"] ="13",
          ["rectAlignment"] ="UpperLeft",
          ["offsetXY"] ="204 -735"
        },
        ["children"] = {}
      },
      {
        ["tag"] ="ToggleButton",
        ["attributes"] = {
          ["id"] ="cs_skill_nature_toggle_"..player.color,
          ["onValueChanged"] ="skillToggle",
          ["width"] ="13",
          ["height"] ="13",
          ["rectAlignment"] ="UpperLeft",
          ["offsetXY"] ="204 -764"
        },
        ["children"] = {}
      },
      {
        ["tag"] ="ToggleButton",
        ["attributes"] = {
          ["id"] ="cs_skill_perception_toggle_"..player.color,
          ["onValueChanged"] ="skillToggle",
          ["width"] ="13",
          ["height"] ="13",
          ["rectAlignment"] ="UpperLeft",
          ["offsetXY"] ="204 -794"
        },
        ["children"] = {}
      },
      {
        ["tag"] ="ToggleButton",
        ["attributes"] = {
          ["id"] ="cs_skill_performance_toggle_"..player.color,
          ["onValueChanged"] ="skillToggle",
          ["width"] ="13",
          ["height"] ="13",
          ["rectAlignment"] ="UpperLeft",
          ["offsetXY"] ="204 -823"
        },
        ["children"] = {}
      },
      {
        ["tag"] ="ToggleButton",
        ["attributes"] = {
          ["id"] ="cs_skill_persuasion_toggle_"..player.color,
          ["onValueChanged"] ="skillToggle",
          ["width"] ="13",
          ["height"] ="13",
          ["rectAlignment"] ="UpperLeft",
          ["offsetXY"] ="204 -852"
        },
        ["children"] = {}
      },
      {
        ["tag"] ="ToggleButton",
        ["attributes"] = {
          ["id"] ="cs_skill_religion_toggle_"..player.color,
          ["onValueChanged"] ="skillToggle",
          ["width"] ="13",
          ["height"] ="13",
          ["rectAlignment"] ="UpperLeft",
          ["offsetXY"] ="204 -882"
        },
        ["children"] = {}
      },
      {
        ["tag"] ="ToggleButton",
        ["attributes"] = {
          ["id"] ="cs_skill_slight_of_hand_toggle_"..player.color,
          ["onValueChanged"] ="skillToggle",
          ["width"] ="13",
          ["height"] ="13",
          ["rectAlignment"] ="UpperLeft",
          ["offsetXY"] ="204 -911"
        },
        ["children"] = {}
      },
      {
        ["tag"] ="ToggleButton",
        ["attributes"] = {
          ["id"] ="cs_skill_stealth_toggle_"..player.color,
          ["onValueChanged"] ="skillToggle",
          ["width"] ="13",
          ["height"] ="13",
          ["rectAlignment"] ="UpperLeft",
          ["offsetXY"] ="204 -941"
        },
        ["children"] = {}
      },
      {
        ["tag"] ="ToggleButton",
        ["attributes"] = {
          ["id"] ="cs_skill_survival_toggle_"..player.color,
          ["onValueChanged"] ="skillToggle",
          ["width"] ="13",
          ["height"] ="13",
          ["rectAlignment"] ="UpperLeft",
          ["offsetXY"] ="204 -970"
        },
        ["children"] = {}
      },
      {
        ["tag"] ="Text",
        ["attributes"] = {
          ["id"] ="cs_skill_passive_perception_"..player.color,
          ["onValueChanged"] ="passivePerceptionUpdate",
          ["width"] ="20",
          ["height"] ="20",
          ["rectAlignment"] ="UpperLeft",
          ["offsetXY"] ="225 -990"
        },
        ["children"] = {}
      }
    }
  }
end

uiAssets = {
{
  name = "Char_Sheet_1",
  url = "http://cloud-3.steamusercontent.com/ugc/1638705743368547764/B435527D225D028E9C97D0271DB8F294CA2C847D/"
},
{
  name = "Small_CS",
  url = "http://cloud-3.steamusercontent.com/ugc/1638705743368599986/C3470C738BB923739B5C8B6742B197735473356B/"
},
{
  name = "Red_X",
  url = "https://upload.wikimedia.org/wikipedia/en/thumb/b/ba/Red_x.svg/1024px-Red_x.svg.png"
}
}

-- dndCS classes --

HP = {
  current = 0,
  max = 0,
  temp = 0,
}
function HP:new(o)
  o = o or {}
  setmetatable(o, self)
  self.__index = self
  return o
end

DeathSaves = {
  successes = 0,
  failures = 0
}
function DeathSaves:new(o)
  o = o or {}
  setmetatable(o, self)
  self.__index = self
  return o
end
function DeathSaves:succeed()
  -- TODO
end
function DeathSaves:fail()
  -- TODO
end

CSPanel = {
  active = false,
  page = 1
}
function CSPanel:new(o)
  o = o or {}
  setmetatable(o, self)
  self.__index = self
  return o
end
function CSPanel:toggleActive()
  self.active = not self.active
end

Proficiency = enum {
  "NOT_PROFICIENT",
  "PROFICIENT",
  "EXPERTISE"
}

PC = {
  cs_panel = CSPanel:new{},
  name = "Name",
  level = 1,
  class = "Class",
  attributes = {
    str = 0,
    dex = 0,
    con = 0,
    int = 0,
    wis = 0,
    cha = 0
  },
  inspiration = 0,
  proficiency_bonus = 0,
  saves = {
    str = false,
    dex = false,
    con = false,
    int = false,
    wis = false,
    cha = false
  },
  skills = {
    acrobatics = Proficiency.NOT_PROFICIENT,
    animal_handling = Proficiency.NOT_PROFICIENT,
    arcana = Proficiency.NOT_PROFICIENT,
    athletics = Proficiency.NOT_PROFICIENT,
    deception = Proficiency.NOT_PROFICIENT,
    history = Proficiency.NOT_PROFICIENT,
    insight = Proficiency.NOT_PROFICIENT,
    intimidation = Proficiency.NOT_PROFICIENT,
    investigation = Proficiency.NOT_PROFICIENT,
    medicine = Proficiency.NOT_PROFICIENT,
    nature = Proficiency.NOT_PROFICIENT,
    perception = Proficiency.NOT_PROFICIENT,
    performance = Proficiency.NOT_PROFICIENT,
    persuasion = Proficiency.NOT_PROFICIENT,
    religion = Proficiency.NOT_PROFICIENT,
    slight_of_hand = Proficiency.NOT_PROFICIENT,
    stealth = Proficiency.NOT_PROFICIENT,
    survival = Proficiency.NOT_PROFICIENT
  },
  passive_perception = 10,
  ac = 10,
  initiative = 0,
  speed = 30,
  hp = HP:new{},
  hit_dice = {
    current = 0,
    max = 0,
    d = 8
  },
  death_saves = DeathSaves:new{},
  attacks = {}
}
function PC:new (o)
  o = o or {}
  setmetatable(o, self)
  self.__index = self
  return o
end

ActivePC = {
  steam_name = "",
  color = nil,
}
function ActivePC:new (o)
  o = o or {}
  setmetatable(o, self)
  self.__index = self
  return o
end
function ActivePC:setColor(color)
  self.color = color
end

dndCS = {
  pc_data = {},
  active_pcs = {},
  gm = {}
}

-- dndPC functions --

function maybeCreatePlayerData(player)
  if dndCS.pc_data[player.steam_id] == nil then
    dndCS.pc_data[player.steam_id] = PC:new()
    log(string.format("Data created for %s", player.steam_name))
  else
    log(string.format("Found data for %s", player.steam_name))
  end
end

function activatePlayer(player)
  log(string.format("dndPC: Activating %s - %s", player.steam_id, player.steam_name))
  dndCS.active_pcs[player.steam_id] = ActivePC:new{
    steam_name = player.steam_name,
    color = player.color
  }
  xml = UI.getXmlTable()
  xml = createInactiveCSPanel(player, xml)
  xml = createActiveCSPanel(player, xml)
  if xml ~= null then
    UI.setXmlTable(xml, _)
  end
  log(string.format("dndPC: %s - %s Activated!", player.steam_id, player.steam_name))
end

-- helper functions --

function ensureUiAssetsExist()
  customAssets = UI.getCustomAssets()
  for _, asset in pairs(uiAssets) do
    found = false
    for _, existingAsset in ipairs(customAssets) do
      found = (existingAsset.name == asset.name)
      if found then
        break
      end
    end
    if not found then
      table.insert(customAssets, asset)
    end
  end
  UI.setCustomAssets(customAssets)
end

-- sys functions --

function onSave()
  data = {dndCS = dndCS}
  JSON.encode(data)
end

function table_to_string(tbl, tab_level, has_key)
  local function tab(level)
    return string.rep(string.rep(" ", 2), level)
  end
  local result = ""
  if has_key then
   result = result .. " {"
  else
   result = result .. tab(tab_level) .. "{"
  end
  local entries = false
  for k, v in pairs(tbl) do
    key = false
    entries = true
    result = result.."\n"
    -- Check the key type (ignore any numerical keys - assume its an array)
    if type(k) == "string" then
        result = result..tab(tab_level + 1).."[\""..k.."\"] ="
        key = true
    end

    -- Check the value type
    if type(v) == "table" then
      result = result..table_to_string(v, tab_level + 1, key)
    elseif type(v) == "boolean" then
        result = result..tostring(v)
    else
        result = result.."\""..v.."\""
    end
    result = result..","
  end
  if has_key and not entries then
    result = result.."}"
  else
    result = result:sub(1, result:len()-1)
    result = result.."\n"..tab(tab_level).."}"
  end
  return result
end

function onLoad(save_state)
  data = JSON.decode(save_state)
  if data.dndCS ~= nil then
    dndCS = data.dndCS
  end
  ensureUiAssetsExist()
  for _, playerRef in ipairs(Player.getPlayers()) do
    maybeCreatePlayerData(playerRef)
    activatePlayer(playerRef)
  end
end

function onPlayerConnect(player)
  maybeCreatePlayerData(player)
  activatePlayer(player)
end

function onPlayerDisconnect(player)
  log(player.steam_name .. " disconnected!")
  dndCS.active_pcs[player.steam_id] = nil
end

function onPlayerChangeColor(player_color)
  for _, playerRef in ipairs(Player.getPlayers()) do
    dndCS.active_pcs[playerRef.steam_id]:setColor(playerRef.color)
    if dndCS.active_pcs[playerRef.steam_id].color == player_color then
      xml = UI.getXmlTable()
      xml = createInactiveCSPanel(playerRef, xml)
      xml = createActiveCSPanel(playerRef, xml)
      UI.setXmlTable(xml, _)
    end
  end
end

-- DND CS functions --

function createInactiveCSPanel(player, xml)
  if (player.color == "Grey" or player.color == "Black") then
    return xml
  end
  inactive_panel_attributes = inactive_panel(player)
  panel_exists = false
  for _, item in pairs(xml) do
    if item["attributes"]["id"] == inactive_panel_attributes["attributes"]["id"] then
      panel_exists = true
      log("found existing panel: " .. item["attributes"]["id"])
      break
    end
  end
  if not panel_exists then
    table.insert(xml, inactive_panel_attributes)
    log("created inactive CS Panel for " .. player.color)
  end
  return xml
end

function createActiveCSPanel(player, xml)
  if (player.color == "Grey" or player.color == "Black") then
    return xml
  end
  active_panel_attributes = active_panel(player)
  panel_exists = false
  for _, item in pairs(xml) do
    if item["attributes"]["id"] == active_panel_attributes["attributes"]["id"] then
      panel_exists = true
      log("found existing panel: " .. item["attributes"]["id"])
    end
  end
  if not panel_exists then
    table.insert(xml, active_panel_attributes)
    log("created active CS Panel for " .. player.color)
  end
  return xml
end

function activateAttributesUI(player_color, player_data, cs)
  attributes = {"str", "dex", "con", "int", "wis", "cha"}

  for _, att in pairs(attributes) do
    stat_label = "cs_" .. att .. "_" .. player_color
    bonus_label = "cs_" .. att .. "_bonus_" .. player_color
    save_label = "cs_st_" .. att .. "_toggle_" .. player_color
    att_val = player_data.attributes[att]
    cs[stat_label] = UI.getAttributes(stat_label)
    cs[stat_label].text = player_data.attributes[att]
    cs[bonus_label] = UI.getAttributes(bonus_label)
    bonus = math.floor(att_val / 2 - 5)
    cs[bonus_label].text = (bonus > 0) and "+" .. tostring(bonus) or tostring(bonus)
    cs[save_label] = UI.getAttributes(save_label)
    cs[save_label].isOn = player_data.saves[att]
  end
  return cs
end

function toggleCSPane(player, mouse_button, button_name)
  dndCS.pc_data[player.steam_id].cs_panel.active = not dndCS.pc_data[player.steam_id].cs_panel.active
  active = not dndCS.pc_data[player.steam_id].cs_panel.active
  UI.setAttribute("cs_inactive_" .. player.color, "active", active)
  UI.setAttribute("cs_active_" .. player.color, "active", not active)

end

function charNameChange(player, new_name)
  dndCS.pc_data[player.steam_id].name = new_name
end

function lvlChange(player, new_lvl)
  dndCS.pc_data[player.steam_id].level = new_level
end

function classChange(player, new_class)
  dndCS.pc_data[player.steam_id].class = new_class
end

function attributeChange(player, att_val, attribute_input_id)
  if att_val == "" then
    return
  end
  att = string.sub(attribute_input_id, 4, 6)
  dndCS.pc_data[player.steam_id].attributes[att] = att_val
  bonus = math.floor(att_val / 2 - 5)
  bonus_string = ""
  if bonus >= 0 then
    bonus_string = "+" .. bonus
  else
    bonus_string = bonus
  end
  UI.setValue("cs_" .. att .. "_bonus_" .. player.color, bonus_string)
end

function inspirationChange(player, insp_val, attribute_input_id)
  dndCS.pc_data[player.steam_id].attributes.inspiration = insp_val
end

function proficiencyChange(player, prof_val, attribute_input_id)
  dndCS.pc_data[player.steam_id].attributes.proficiency_bonus = prof_val
end

function savingThrowToggle(player, toggle, st_input_id)
  att = string.sub(st_input_id, 7, 9)
  dndCS.pc_data[player.steam_id].saves[att].proficient = toggle
end

function skillToggle(player, toggle, skill_input_id)
  last = string.find(skill_input_id, "_toggle") - 1
  skill_name = string.sub(skill_input_id, 10, last)
  dndCS.pc_data[player.steam_id].skills[skill_name] = toggle
end

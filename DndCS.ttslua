--[[ Lua code. See documentation: https://api.tabletopsimulator.com/ ]]--
local UIData = require("/DndCS/UIData")
local DndCSClasses = require("/DndCS/Classes")
-- data --

dndCS = {
  pc_data = {},
  active_pcs = {},
  gm = {}
}
-- dndPC functions --

function maybeCreatePlayerData(player)
  if dndCS.pc_data[player.steam_id] == nil then
    dndCS.pc_data[player.steam_id] = DndCSClasses.PC:new()
    log(string.format("Data created for %s", player.steam_name))
  else
    log(string.format("Found data for %s", player.steam_name))
  end
end

function activatePlayer(player)
  log(string.format("dndPC: Activating %s - %s", player.steam_id, player.steam_name))
  dndCS.active_pcs[player.steam_id] = DndCSClasses.ActivePC:new{
    steam_name = player.steam_name,
    color = player.color
  }
  xml = UI.getXmlTable()
  xml = createInactiveCSPanel(player, xml)
  xml = createActiveCSPanel(player, xml)
  if xml ~= null then
    UI.setXmlTable(xml, _)
  end
  log(string.format("dndPC: %s - %s Activated!", player.steam_id, player.steam_name))
end

-- helper functions --

function ensureUiAssetsExist()
  customAssets = UI.getCustomAssets()
  for _, asset in pairs(UIData.uiAssets) do
    found = false
    for _, existingAsset in ipairs(customAssets) do
      found = (existingAsset.name == asset.name)
      if found then
        break
      end
    end
    if not found then
      table.insert(customAssets, asset)
    end
  end
  UI.setCustomAssets(customAssets)
end

-- sys functions --

function onSave()
  data = {dndCS = dndCS}
  JSON.encode(data)
end

function table_to_string(tbl, tab_level, has_key)
  local function tab(level)
    return string.rep(string.rep(" ", 2), level)
  end
  local result = ""
  if has_key then
   result = result .. " {"
  else
   result = result .. tab(tab_level) .. "{"
  end
  local entries = false
  for k, v in pairs(tbl) do
    key = false
    entries = true
    result = result.."\n"
    -- Check the key type (ignore any numerical keys - assume its an array)
    if type(k) == "string" then
        result = result..tab(tab_level + 1).."[\""..k.."\"] ="
        key = true
    end

    -- Check the value type
    if type(v) == "table" then
      result = result..table_to_string(v, tab_level + 1, key)
    elseif type(v) == "boolean" then
        result = result..tostring(v)
    else
        result = result.."\""..v.."\""
    end
    result = result..","
  end
  if has_key and not entries then
    result = result.."}"
  else
    result = result:sub(1, result:len()-1)
    result = result.."\n"..tab(tab_level).."}"
  end
  return result
end

function onLoad(save_state)
  data = JSON.decode(save_state)
  if data.dndCS ~= nil then
    dndCS = data.dndCS
  end
  ensureUiAssetsExist()
  for _, playerRef in ipairs(Player.getPlayers()) do
    maybeCreatePlayerData(playerRef)
    activatePlayer(playerRef)
  end
end

function onPlayerConnect(player)
  maybeCreatePlayerData(player)
  activatePlayer(player)
end

function onPlayerDisconnect(player)
  log(player.steam_name .. " disconnected!")
  dndCS.active_pcs[player.steam_id] = nil
end

function onPlayerChangeColor(player_color)
  for _, playerRef in ipairs(Player.getPlayers()) do
    dndCS.active_pcs[playerRef.steam_id]:setColor(playerRef.color)
    if dndCS.active_pcs[playerRef.steam_id].color == player_color then
      xml = UI.getXmlTable()
      xml = createInactiveCSPanel(playerRef, xml)
      xml = createActiveCSPanel(playerRef, xml)
      UI.setXmlTable(xml, _)
    end
  end
end

-- DND CS functions --

function createInactiveCSPanel(player, xml)
  if (player.color == "Grey" or player.color == "Black") then
    return xml
  end
  inactive_panel_attributes = UIData.inactive_panel(player)
  panel_exists = false
  for _, item in pairs(xml) do
    if item["attributes"]["id"] == inactive_panel_attributes["attributes"]["id"] then
      panel_exists = true
      log("found existing panel: " .. item["attributes"]["id"])
      break
    end
  end
  if not panel_exists then
    table.insert(xml, inactive_panel_attributes)
    log("created inactive CS Panel for " .. player.color)
  end
  return xml
end

function createActiveCSPanel(player, xml)
  if (player.color == "Grey" or player.color == "Black") then
    return xml
  end
  active_panel_attributes = UIData.active_panel(player)
  panel_exists = false
  for _, item in pairs(xml) do
    if item["attributes"]["id"] == active_panel_attributes["attributes"]["id"] then
      panel_exists = true
      log("found existing panel: " .. item["attributes"]["id"])
    end
  end
  if not panel_exists then
    table.insert(xml, active_panel_attributes)
    log("created active CS Panel for " .. player.color)
  end
  return xml
end

function activateAttributesUI(player_color, player_data, cs)
  attributes = {"str", "dex", "con", "int", "wis", "cha"}

  for _, att in pairs(attributes) do
    stat_label = "cs_" .. att .. "_" .. player_color
    bonus_label = "cs_" .. att .. "_bonus_" .. player_color
    save_label = "cs_st_" .. att .. "_toggle_" .. player_color
    att_val = player_data.attributes[att]
    cs[stat_label] = UI.getAttributes(stat_label)
    cs[stat_label].text = player_data.attributes[att]
    cs[bonus_label] = UI.getAttributes(bonus_label)
    bonus = math.floor(att_val / 2 - 5)
    cs[bonus_label].text = (bonus > 0) and "+" .. tostring(bonus) or tostring(bonus)
    cs[save_label] = UI.getAttributes(save_label)
    cs[save_label].isOn = player_data.saves[att]
  end
  return cs
end

function toggleCSPane(player, mouse_button, button_name)
  dndCS.pc_data[player.steam_id].cs_panel.active = not dndCS.pc_data[player.steam_id].cs_panel.active
  active = not dndCS.pc_data[player.steam_id].cs_panel.active
  UI.setAttribute("cs_inactive_" .. player.color, "active", active)
  UI.setAttribute("cs_active_" .. player.color, "active", not active)

end

function charNameChange(player, new_name)
  dndCS.pc_data[player.steam_id].name = new_name
end

function lvlChange(player, new_lvl)
  dndCS.pc_data[player.steam_id].level = new_level
end

function classChange(player, new_class)
  dndCS.pc_data[player.steam_id].class = new_class
end

function attributeChange(player, att_val, attribute_input_id)
  if att_val == "" then
    return
  end
  att = string.sub(attribute_input_id, 4, 6)
  dndCS.pc_data[player.steam_id].attributes[att] = att_val
  bonus = math.floor(att_val / 2 - 5)
  bonus_string = ""
  if bonus >= 0 then
    bonus_string = "+" .. bonus
  else
    bonus_string = bonus
  end
  UI.setValue("cs_" .. att .. "_bonus_" .. player.color, bonus_string)
end

function inspirationChange(player, insp_val, attribute_input_id)
  dndCS.pc_data[player.steam_id].attributes.inspiration = insp_val
end

function proficiencyChange(player, prof_val, attribute_input_id)
  dndCS.pc_data[player.steam_id].attributes.proficiency_bonus = prof_val
end

function savingThrowToggle(player, toggle, st_input_id)
  att = string.sub(st_input_id, 7, 9)
  dndCS.pc_data[player.steam_id].saves[att].proficient = toggle
end

function skillToggle(player, toggle, skill_input_id)
  last = string.find(skill_input_id, "_toggle") - 1
  skill_name = string.sub(skill_input_id, 10, last)
  dndCS.pc_data[player.steam_id].skills[skill_name] = toggle
end

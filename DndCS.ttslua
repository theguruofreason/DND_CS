--[[ Lua code. See documentation: https://api.tabletopsimulator.com/ ]]--
local UIData = require("/DndCS/UIData")
local DndCSClasses = require("/DndCS/Classes")
local DndCS = {}
-- data --

DndCS.dndCS = {
  pc_data = {},
  active_pcs = {},
  gm = {}
}
-- dndPC functions --

function DndCS.maybeCreatePlayerData(player)
  if DndCS.dndCS.pc_data[player.steam_id] == nil then
    DndCS.dndCS.pc_data[player.steam_id] = DndCSClasses.PC:new()
    log(string.format("Data created for %s", player.steam_name))
  else
    log(string.format("Found data for %s", player.steam_name))
  end
end

function DndCS.activatePlayer(player)
  log(string.format("dndPC: Activating %s - %s", player.steam_id, player.steam_name))
  DndCS.dndCS.active_pcs[player.steam_id] = DndCSClasses.ActivePC:new{
    steam_name = player.steam_name,
    color = player.color
  }
  if (player.color ~= "Grey" and player.color ~= "Black") then
    xml = UI.getXmlTable()
    xml = DndCS.createInactiveCSPanel(player, xml)
    xml = DndCS.createActiveCSPanel(player, xml)
    UI.setXmlTable(xml, _)
  end
  log(string.format("dndPC: %s - %s Activated!", player.steam_id, player.steam_name))
end

-- helper functions --

function DndCS.ensureUiAssetsExist()
  customAssets = UI.getCustomAssets()
  for _, asset in pairs(UIData.uiAssets) do
    found = false
    for _, existingAsset in ipairs(customAssets) do
      found = (existingAsset.name == asset.name)
      if found then
        break
      end
    end
    if not found then
      table.insert(customAssets, asset)
    end
  end
  UI.setCustomAssets(customAssets)
end

-- sys functions --

function onSave()
  data = {dndCS = dndCS}
  JSON.encode(data)
end

function onLoad(save_state)
  data = JSON.decode(save_state)
  if data.dndCS ~= nil then
    DndCS.dndCS = data.dndCS
  end
  DndCS.ensureUiAssetsExist()
  for _, playerRef in ipairs(Player.getPlayers()) do
    DndCS.maybeCreatePlayerData(playerRef)
    DndCS.activatePlayer(playerRef)
  end
end

function onPlayerConnect(player)
  DndCS.maybeCreatePlayerData(player)
  DndCS.activatePlayer(player)
end

function onPlayerDisconnect(player)
  log(player.steam_name .. " disconnected!")
  dndCS.active_pcs[player.steam_id] = nil
end

function onPlayerChangeColor(player_color)
  for _, playerRef in ipairs(Player.getPlayers()) do
    if playerRef.color == player_color then
      DndCS.dndCS.active_pcs[playerRef.steam_id]:setColor(playerRef.color)
      xml = UI.getXmlTable()
      xml = DndCS.createInactiveCSPanel(playerRef, xml)
      xml = DndCS.createActiveCSPanel(playerRef, xml)
      UI.setXmlTable(xml, _)
    end
  end
end

-- DND CS functions --

function DndCS.createInactiveCSPanel(player, xml)
  if (player.color == "Grey" or player.color == "Black") then
    return xml
  end
  inactive_panel_attributes = UIData.inactive_panel(player, DndCS.dndCS.pc_data[player.steam_id].cs_panel.active)
  panel_exists = false
  for _, item in pairs(xml) do
    if item["attributes"]["id"] == inactive_panel_attributes["attributes"]["id"] then
      panel_exists = true
      log("found existing panel: " .. item["attributes"]["id"])
      break
    end
  end
  if not panel_exists then
    table.insert(xml, inactive_panel_attributes)
    log("created inactive CS Panel for " .. player.color)
  end
  return xml
end

function DndCS.createActiveCSPanel(player, xml)
  if (player.color == "Grey" or player.color == "Black") then
    return xml
  end
  active_panel_attributes = UIData.active_panel(player, DndCS.dndCS.pc_data[player.steam_id].cs_panel.active)
  active_panel_attributes = DndCS.populateAttributesUI(player.color, DndCS.dndCS.pc_data[player.steam_id], active_panel_attributes)
  panel_exists = false
  for _, item in pairs(xml) do
    if item["attributes"]["id"] == active_panel_attributes["attributes"]["id"] then
      panel_exists = true
      log("found existing panel: " .. item["attributes"]["id"])
    end
  end
  if not panel_exists then
    table.insert(xml, active_panel_attributes)
    log("created active CS Panel for " .. player.color)
  end
  return xml
end

function DndCS.populateAttributesUI(player_color, player_data, xml)
  attributes = {"str", "dex", "con", "int", "wis", "cha"}

  for _, att in pairs(attributes) do
    stat_label = "cs_" .. att .. "_" .. player_color
    bonus_label = "cs_" .. att .. "_bonus_" .. player_color
    save_label = "cs_st_" .. att .. "_toggle_" .. player_color
    att_val = player_data.attributes[att]

    for i, item in pairs(xml.children) do
      if item.attributes.id == stat_label then
        xml.children[i].attributes.text = att_val
      elseif item.attributes.id == bonus_label then
        xml.children[i].attributes.text = math.floor(att_val / 2 - 5)
      elseif item.attributes.id == save_label then
        xml.children[i].attributes.isOn = player_data.saves[att]
      end
    end
  end
  return xml
end

function toggleCSPane(player, mouse_button, button_name)
  DndCS.dndCS.pc_data[player.steam_id].cs_panel.active = not DndCS.dndCS.pc_data[player.steam_id].cs_panel.active
  active = DndCS.dndCS.pc_data[player.steam_id].cs_panel.active
  UI.setAttribute("cs_inactive_" .. player.color, "active", not active)
  UI.setAttribute("cs_active_" .. player.color, "active", active)
end

function charNameChange(player, new_name)
  DndCS.dndCS.pc_data[player.steam_id].name = new_name
end

function lvlChange(player, new_lvl)
  DndCS.dndCS.pc_data[player.steam_id].level = new_level
end

function classChange(player, new_class)
  DndCS.dndCS.pc_data[player.steam_id].class = new_class
end

function attributeChange(player, att_val, attribute_input_id)
  if att_val == "" then
    return
  end
  att = string.sub(attribute_input_id, 4, 6)
  DndCS.dndCS.pc_data[player.steam_id].attributes[att] = att_val
  bonus = math.floor(att_val / 2 - 5)
  bonus_string = (bonus > 0) and "+" .. tostring(bonus) or tostring(bonus)
  UI.setValue("cs_" .. att .. "_bonus_" .. player.color, bonus_string)
end

function inspirationChange(player, insp_val, attribute_input_id)
  DndCS.dndCS.pc_data[player.steam_id].attributes.inspiration = insp_val
end

function proficiencyChange(player, prof_val, attribute_input_id)
  DndCS.dndCS.pc_data[player.steam_id].attributes.proficiency_bonus = prof_val
end

function savingThrowToggle(player, toggle, st_input_id)
  att = string.sub(st_input_id, 7, 9)
  DndCS.dndCS.pc_data[player.steam_id].saves[att].proficient = toggle
end

function skillToggle(player, toggle, skill_input_id)
  last = string.find(skill_input_id, "_toggle") - 1
  skill_name = string.sub(skill_input_id, 10, last)
  DndCS.dndCS.pc_data[player.steam_id].skills[skill_name] = toggle
end

return DndCS

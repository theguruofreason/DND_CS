Dice = {}

-- Classes --

Dice.RollStatus = {
  rolling = false,
  dice = {},
  waiting_to_roll = false,
  message = "",
  bonus = 0,
  allowMultiroll = false,
  onlyAnnounceToColor = nil,
  timerName = nil,
  cleanupTimer = nil,
  baseTransform = nil,
  individualBonus = false,
  showTotal = false,
  maxMin = false,
  colorDie = true
}
function Dice.RollStatus:new(o)
  return setmetatable(
  o or {},
  {
    __index = function(table, key)
      return Dice.RollStatus[key]
    end
  })
end
function Dice.RollStatus:mergeFrom(o)
    assert(o.__index == Dice.RollStatus.__index, "Cannot merge non-RollStatus with RollStatus.")
    for key, val in pairs(o) do
      self.key = val
    end
  end
-- Note that this will only merge set values, not values from metatable

-- Globals --

ROLL_DELAY = 2
MULTIROLL_DELAY = 0.1
ROLL_TIMEOUT = 10
DICE_CLEANUP_DELAY = 5
MAX_DICE = 10 -- WARNING: Set to 0 responsibly.
MAX_WIDTH = 10
XYZ_OFFSET = Vector()

Dice.DIE_TYPE = {
  [4] = "Die_4",
  [6] = "Die_6",
  [8] = "Die_8",
  [10] = "Die_10",
  [12] = "Die_12",
  [20] = "Die_20"
}

function ColorToHex(color)
  local rgb = stringColorToRGB(color)
  return string.format("[" .. "%02x%02x%02x", rgb[1]*255,rgb[2]*255,rgb[3]*255) .. "]"
end

TYPE_TO_HEX_COLOR = {
  Die_4 = ColorToHex("Blue"),
  Die_6 = ColorToHex("White"),
  Die_8 = ColorToHex("Red"),
  Die_10 = ColorToHex("Green"),
  Die_12 = ColorToHex("Orange"),
  Die_20 = ColorToHex("Purple")
}

Dice.RollStatuses = {}

-- Helper Functions --

function spawnObjects(objects)
  assert(#objects > 1, string.format("function spawnObjects requires at least 2 objects, got %d", #objects)
    )
  spawnedObjects = {}
  for i, obj in ipairs(objects) do
    table.insert(spawnedObjects, spawnObject(obj))
  end
  return spawnedObjects
end

function wait(time)
    local start = os.time()
    repeat coroutine.yield(0) until os.time() > start + time
end

function calcDiePosOffsetInRow(i, diceCount, yRot)
  local width = (MAX_WIDTH * 2) / (1 + math.exp(-diceCount/2)) - 10
  local sep = diceCount > 1 and width / (diceCount - 1) or 0
  local offset = sep * ((i - 1) - (diceCount - 1) / 2)
  return Vector(math.cos(math.rad(yRot))*offset, 0, -math.sin(math.rad(yRot))*offset)
end

-- Main Functions --

function Dice.click(steamId, newDieType, rollStatus)
  if Dice.RollStatuses[steamId] == nil then
    Dice.RollStatuses[steamId] = rollStatus
  else
    if Dice.RollStatuses[steamId].rolling then return end
    if (
    (#Dice.RollStatuses[steamId].dice) and
    (Dice.RollStatuses[steamId].cleanupTimer)) then
      for _, die in pairs(Dice.RollStatuses[steamId].dice) do
        die.destruct()
      end
      Wait.stop(Dice.RollStatuses[steamId].cleanupTimer)
      Dice.RollStatuses[steamId] = rollStatus
    elseif (rollStatus.allowMultiroll) then
      Dice.RollStatuses[steamId]:mergeFrom(rollStatus)
    else
      return
    end
  end
  local rollStatus = Dice.RollStatuses[steamId]
  assert(
  rollStatus.baseTransform ~= nil,
  "Cannot generate roll with no baseTransform."
  )
  if (MAX_DICE > 0 and #rollStatus.dice >= MAX_DICE) or
  ((#rollStatus.dice > 0) and (not rollStatus.allowMultiroll)) then return end
  local yRot = rollStatus.baseTransform.rotation.y
  for i, die in ipairs(rollStatus.dice) do
    die.setPositionSmooth(rollStatus.baseTransform.position + calcDiePosOffsetInRow(i, #rollStatus.dice + 1, yRot), false, true)
  end
  local numDice = #Dice.RollStatuses[steamId].dice
  if numDice == 0 then Dice.RollStatuses[steamId].dice = {} end
  table.insert(Dice.RollStatuses[steamId].dice, spawnObject({
    type = newDieType,
    position = rollStatus.baseTransform.position + calcDiePosOffsetInRow(numDice + 1, numDice + 1, yRot),
    callback_function = function(die) die.setLock(true) end
  }))
  Dice.RollStatuses[steamId].timerName = Dice.waitForRoll(steamId)
end

function Dice.waitForRoll(steamId)
  rollStatus = Dice.RollStatuses[steamId]
  if rollStatus.timerName ~= nil then Wait.stop(rollStatus.timerName) end
  return Wait.time(
  function () Dice.rollDice(steamId) end,
  ROLL_DELAY
  )
end

function Dice.rollDice(steamId)
  Dice.RollStatuses[steamId].rolling = true
  rollStatus = Dice.RollStatuses[steamId]
  function coroutine_rollDice()
    for _, die in ipairs(rollStatus.dice) do
      die.setLock(false)
      die.roll()
      local start = os.time()
      repeat coroutine.yield(0) until os.time() > start + MULTIROLL_DELAY
    end
    Dice.monitorDice(steamId)
    return 1
  end
  startLuaCoroutine(self, "coroutine_rollDice")
end

function Dice.monitorDice(steamId)
  rollStatus = Dice.RollStatuses[steamId]
  function coroutine_monitorDice()
    local start_time = os.time()
    repeat
      local resting = true
      for _, die in ipairs(rollStatus.dice) do
        if die ~= nil and die.resting == false then
          resting = false
          break
        end
      end
      coroutine.yield(0)
    until resting == true or start_time + ROLL_TIMEOUT < os.time()
    Dice.RollStatuses[steamId].rolling = false
    Dice.announceRoll(steamId)
    Dice.RollStatuses[steamId].cleanupTimer = Dice.cleanupDice(rollStatus.dice, steamId)
    return 1
  end
  startLuaCoroutine(self, "coroutine_monitorDice")
end

-- I dare you to try to trace this
function Dice.announceRoll(steamId)
  rollStatus = Dice.RollStatuses[steamId]
  local dice = rollStatus.dice
  local message = rollStatus.message
  local bonus = rollStatus.bonus
  local total = 0
  local rolls = {}

  for i, die in ipairs(dice) do
    local value = die.getValue()
    total = total + value
    table.insert(rolls, (rollStatus.bonus and rollStatus.individualBonus and (value + bonus) or value))
    message = message..(rollStatus.colorDie and RGBToHex(die.getColorTint())..value.."[-]" or value)
    if #rollStatus.dice > 1 and rollStatus.individualBonus and rollStatus.bonus ~= 0 then
      message = message..string.format(" ("..(bonus >= 0 and "+%d) = %d" or "%d) = %d"), bonus, value + bonus)
    end
    if rollStatus.individualBonus then total = total + bonus end
    message = message..(i ~= #dice and ", " or "")
  end
  if rollStatus.bonus ~= 0 and (not rollStatus.individualBonus or #rollStatus.dice == 1) then
    message = message .. string.format(" ("..(bonus >= 0 and "+%d)" or "%d)"), bonus)
    if (not rollStatus.individualBonus) then total = total + bonus end
  end
  if ((#dice ~= 1 or bonus ~= 0) and rollStatus.showTotal) or (bonus ~= 0 and #rollStatus.dice == 1) then
    message = message .. string.format(" for a total of %d", total)
  end
  if rollStatus.showMaxMin and #dice ~= 1 then
    message = message..
    string.format(
    "\nHighest roll: %d, Lowest roll: %d",
    math.max(unpack(rolls)),
    math.min(unpack(rolls))
    )
  end
  if rollStatus.onlyAnnounceToColor ~= nil then
    broadcastToColor(message, rollStatus.onlyAnnounceToColor, {1,1,1})
  else
    broadcastToAll(message, {1,1,1})
  end
end

function Dice.cleanupDice(dice, steamId)
  return Wait.time(
  function()
    for _, die in pairs(dice) do
      die.destruct()
    end
    Dice.RollStatuses[steamId] = nil
  end,
  DICE_CLEANUP_DELAY
  )
end

return Dice

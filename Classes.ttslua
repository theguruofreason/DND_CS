local Logging = require("/DndCS/BetterLogging")
local enum = require("/DndCS/Enum")
local log = Logging.log

-- DnDCS classes --
local DndCSClasses = {}

DndCSClasses.Proficiency = enum {
  "NOT_PROFICIENT",
  "PROFICIENT",
  "EXPERTISE"
}

DndCSClasses.Attributes = {
  defaults = {
    str = 0,
    dex = 0,
    con = 0,
    int = 0,
    wis = 0,
    cha = 0
  }
}
function DndCSClasses.Attributes:new(o)
  o = o or {}
  for att, val in pairs(self.defaults) do
    if o[att] == nil then o[att] = val end
  end
  return o
end

DndCSClasses.Saves = {
  defaults = {
    str = false,
    dex = false,
    con = false,
    int = false,
    wis = false,
    cha = false,
  }
}
function DndCSClasses.Saves:new(o)
  o = o or {}
  for att, val in pairs(self.defaults) do
    if o[att] == nil then o[att] = val end
  end
  return o
end

DndCSClasses.Skills = {
  defaults = {
    acrobatics = DndCSClasses.Proficiency.NOT_PROFICIENT,
    animal_handling = DndCSClasses.Proficiency.NOT_PROFICIENT,
    arcana = DndCSClasses.Proficiency.NOT_PROFICIENT,
    athletics = DndCSClasses.Proficiency.NOT_PROFICIENT,
    deception = DndCSClasses.Proficiency.NOT_PROFICIENT,
    history = DndCSClasses.Proficiency.NOT_PROFICIENT,
    insight = DndCSClasses.Proficiency.NOT_PROFICIENT,
    intimidation = DndCSClasses.Proficiency.NOT_PROFICIENT,
    investigation = DndCSClasses.Proficiency.NOT_PROFICIENT,
    medicine = DndCSClasses.Proficiency.NOT_PROFICIENT,
    nature = DndCSClasses.Proficiency.NOT_PROFICIENT,
    perception = DndCSClasses.Proficiency.NOT_PROFICIENT,
    performance = DndCSClasses.Proficiency.NOT_PROFICIENT,
    persuasion = DndCSClasses.Proficiency.NOT_PROFICIENT,
    religion = DndCSClasses.Proficiency.NOT_PROFICIENT,
    sleight_of_hand = DndCSClasses.Proficiency.NOT_PROFICIENT,
    stealth = DndCSClasses.Proficiency.NOT_PROFICIENT,
    survival = DndCSClasses.Proficiency.NOT_PROFICIENT
  }
}
function DndCSClasses.Skills:new(o)
  o = o or {}
  for att, val in pairs(self.defaults) do
    if o[att] == nil then o[att] = val end
  end
  return o
end

DndCSClasses.skill_to_att = {
  acrobatics = "dex",
  animal_handling = "wis",
  arcana = "int",
  athletics = "str",
  deception = "cha",
  history = "int",
  insight = "wis",
  intimidation = "cha",
  investigation = "int",
  medicine = "wis",
  nature = "int",
  perception = "wis",
  performance = "cha",
  persuasion = "cha",
  religion = "int",
  sleight_of_hand = "dex",
  stealth = "dex",
  survival = "wis"
}

-- Depricated
DndCSClasses.PlayerData = {}
function DndCSClasses.PlayerData:new(o)
  return setmetatable(o or {}, DndCSClasses.PlayerData)
end

DndCSClasses.DiceVal = {
  defaults = {
    sides = 6,
    num = 1,
    bonus = 0,
  }
}
function DndCSClasses.DiceVal:new(o)
  o = o or {}
  for key, val in pairs(DndCSClasses.DiceVal.defaults) do
    if o[key] == nil then o[key] = val end
  end
  return o
end
function DndCSClasses.DiceVal:parseFromString(input)
  local pattern = "(%d+)d(%d+)%s*([+,-])%s*(%d+)"
  numDice, diceSides, plusOrMinus, bonus = input:match(pattern)
  if not numDice or not diceSides then
    if input ~= "" then log(string.format("Invalid damage entry: \"%s\". Must be format \"XdY + Z\".", input), "WARN") end
    return
  end
  bonus = bonus or 0
  return self:new({
    sides = tonumber(diceSides),
    num = tonumber(numDice),
    bonus = tonumber(plusOrMinus..bonus),
  })
end
function DndCSClasses.DiceVal:toString(diceVal)
  local diceString = string.format("%dd%d", diceVal.num, diceVal.sides)
  if diceVal.bonus ~= 0 then
    diceString = diceString .. (diceVal.bonus > 0 and " + " or " - ") .. diceVal.bonus
  end
  return diceString
end

DndCSClasses.Attack = {
  defaults = {
    name = "",
    toHitBonus = 0,
    damage = DndCSClasses.DiceVal:new(),
    type = ""
  }
}
function DndCSClasses.Attack:new(o)
  o = o or {}
  for key, val in pairs(DndCSClasses.Attack.defaults) do
    if o[key] == nil then o[key] = val end
  end
  return o
end

DndCSClasses.PC = {
  defaults = {
    version = "0.1.0",
    cs_panel_active = false,
    cs_panel_page = 1,
    char_name = "",
    level = 1,
    class = "",
    inspiration = 0,
    proficiency_bonus = 0,
    attributes = DndCSClasses.Attributes:new(),
    saves = DndCSClasses.Saves:new(),
    skills = DndCSClasses.Skills:new(),
    passive_perception = 10,
    ac = 10,
    initiative = 0,
    speed = 30,
    hp_current = 0,
    hp_max = 0,
    hp_temp = 0,
    hit_dice_current = 0,
    hit_dice_max = 0,
    hit_dice_d = 8,
    death_save_successes = 0,
    death_save_failures = 0,
    attacks = {
      DndCSClasses.Attack:new(),
      DndCSClasses.Attack:new(),
      DndCSClasses.Attack:new(),
    },
    features_and_traits = "",
  },
  direct_editables = {
    "char_name",
    "level",
    "class",
    "inspiration",
    "proficiency_bonus",
    "passive_perception",
    "ac",
    "initiative",
    "speed",
    "hp_current",
    "hp_max",
    "hp_temp",
    "hit_dice_current",
    "hit_dice_max",
    "hit_dice_d",
    "attacks",
    "features_and_traits"
  }
}
function DndCSClasses.PC:new(o)
  o = o or {}
  for att, val in pairs(self.defaults) do
    if o[att] == nil then o[att] = val end
  end
  return o
end

return DndCSClasses
